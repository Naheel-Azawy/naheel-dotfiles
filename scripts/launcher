#!/bin/python3

from subprocess import Popen, PIPE, STDOUT
import keybindings
import sh
import os
import sys
import json

argv = sys.argv
HOME = os.getenv("HOME")

cache = f"{HOME}/.cache"
cache_recent = f"{cache}/launcher_recent.json"
cache_path = f"{cache}/launcher_path.txt"

tui_apps = [
    "music-player", "emx", "lf", "vis", "corona",
    "alsamixer", "lyrics"
]

try:
    games = sh.games("list").strip().split("\n")
except:
    games = []

try:
    recent = json.load(open(cache_recent))
except:
    recent = {}

# TODO: commands from x window apps
commands = {
    "lf": "sed -En 's/^cmd ([a-zA-Z\-]+) .*/\1/p' ~/.config/lf/lfrc"
}

def istui(b):
    return b in tui_apps

def isgame(b):
    return b in games

def inc(b):
    global recent
    try:
        recent[b] += 1
    except:
        recent[b] = 1
    if not os.path.isdir(cache):
        os.makedirs(cache, exist_ok=True)
    json.dump(recent, open(cache_recent, 'w'))

def run(arg):
    str  = arg.split(":")
    type = str[0]
    if len(str) > 1:
        del str[0]
        run = ":".join(str)
    else:
        run = str[0]
        type = ""
    run  = run.strip()
    type = type.strip()

    if type == "power":
        sh.dmenupower(run)
    elif type == "shortcuts":
        run = run.split(":")[0].strip()
        keybindings.run(run)
    elif type == "bar":
        #os.system("bar gui") # TODO: handle
        pass
    elif type == "games":
        sh.games(run)
    else:
        exe = run.split()[0]
        if os.popen(f"command -v {exe}").close() != 256:
            inc(exe)
            if istui(exe):
                sh.theterm(f"exec {run}")
            else:
                os.system(run)
        else:
            raise ValueError("Couldn't run given command")

def ls(cmd="", out=sys.stdout):
    bins = os.popen("dmenu_path").read().split("\n")
    bins.pop() # remove last empty line
    bins += games
    bins = list(set(bins))
    global recent

    # in case a bin is in recent but no longer is available in PATH
    todel = [] # items to be deleted
    for b in recent.keys():
        try:
            bins.remove(b)
        except ValueError:
            # b is not in bins
            todel.append(b)
    for b in todel:
        del recent[b]
    todel = None

    rec = sorted(recent, key=recent.get, reverse=True)
    allbins = rec + bins

    def printout(s):
        out.write(s + "\n")

    if cmd == "games":
        for g in games:
            printout(g)
    elif cmd == "recent":
        for b in rec:
            printout(b)
    elif cmd == "notused":
        for b in bins:
            printout(b)
    elif cmd == "all":
        for b in allbins:
            printout(b)
    else:
        def ident(i):
            return ("%9s: ") % i

        for b in rec:
            printout(ident("games" if b in games else "recent") + b)

        for p in [ "Suspend", "Shutdown", "Reboot",
                   "Logout", "Lock", "Hibernate" ]:
            printout(ident("power") + p)

        for s in keybindings.get_doc():
            printout(ident("shortcuts") + s)

        for b in bins:
            printout(ident("games" if b in games else "bins") + b)

def query(cmd):
    # TODO: later
    return f"{cmd}: deadbeef"

def main():
    if len(argv) > 1 and argv[1] == "ls":
        ls()
    elif len(argv) == 1:
        pipe = Popen("menu-interface -i -l 20 -r", shell=True,
                     universal_newlines=True, stdin=PIPE, stdout=PIPE)
        ls(out=pipe.stdin)
        line = ""
        for line in iter(pipe.stdout.readline, ""):
            line = line.strip()
            if line.startswith("!"):
                res = query(line)
                pipe.stdin.write(res)
                print(res)
        print(line)
        if line:
            run(line)
    else:
        print("usage: start [ls]")
        exit(1)

if __name__ == "__main__":
    main()

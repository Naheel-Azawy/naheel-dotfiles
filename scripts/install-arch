#!/bin/sh

# Yet another Arch installer script
# Before writing this, I knew about archfi
# https://github.com/MatMoul/archfi
# archfi is amazing. But it had more options than what I needed.
# I just wanted something that takes as little input as possible
# and only at the beginning and then deals with the installation
# automatically.
# The plan was to make this a general purpose installer but the
# day I wrote it I found out about the official Arch installer
# https://github.com/archlinux/archinstall
# which will probably be superior to other installers soon.
# So, I believe it would be a good idea to keep this installer
# as a minimal installer. Some options might be added later, but
# probably not too much.

[ "$DEV" ]          || DEV=/dev/sdc
[ "$MP" ]           || MP=/mnt/arch-install
[ "$USERNAME" ]     || USERNAME=me
[ "$PASSWORD" ]     || PASSWORD=123
[ "$HOSTNAME" ]     || HOSTNAME=pc
[ "$ZONE" ]         || ZONE=Asia/Qatar
[ "$INSTALL_DOTS" ] || INSTALL_DOTS=
[ "$LOCALES" ]      || LOCALES=en_US.UTF-8:ar_QA.UTF-8

SELF=$(realpath "$0")
NAME=$(basename "$SELF")

C='\033[1m\033[34m' # blue
E='\033[1m\033[31m' # red
R='\033[0m'         # reset

info() {
    printf "${C}INFO:${R} %s\n" "$@"
}

err() {
    printf "${E}ERROR:${R} %s\n" "$@" >&2
}

is_parabola() {
    grep -q 'ID=parabola' /etc/os-release
}

uncomment() {
    line="$1"
    file="$2"
    sed -i "s/# *$line/$line/" "$file"
}

comment() {
    line="$1"
    file="$2"
    sed -i "s/$line/#$line/" "$file"
}

check_root() {
    if [ "$(id -u)" != 0 ]; then
        echo 'Root is needed'
        exit 1
    fi
}

vars() {
    echo "export DEV=$DEV"
    echo "export MP=$MP"
    echo "export USERNAME=$USERNAME"
    [ "$1" = --all ] && echo "export PASSWORD=$PASSWORD"
    echo "export HOSTNAME=$HOSTNAME"
    echo "export ZONE=$ZONE"
    echo "export INSTALL_DOTS=$INSTALL_DOTS"
}

mkfss() {
    # boot
    info "Formatting ${DEVP}1 as boot partition..."
    if [ -e "${DEVP}1" ]; then
        yes | mkfs.fat -F32 "${DEVP}1"
    else
        err "${DEVP}1 not found"
        return 1
    fi || return 1
    echo

    # swap
    info "Formatting ${DEVP}2 as swap partition..."
    if [ -e "${DEVP}2" ]; then
        yes | mkswap "${DEVP}2"
    else
        err "${DEVP}2 not found"
        return 1
    fi || return 1
    echo

    # root
    info "Formatting ${DEVP}3 as root partition..."
    if [ -e "${DEVP}3" ]; then
        yes | mkfs.ext4 "${DEVP}3"
    else
        err "${DEVP}3 not found"
        return 1
    fi || return 1
    echo

    # home (optional)
    if [ -e "${DEVP}4" ]; then
        info "Formatting ${DEVP}4 as home partition..."
        yes | mkfs.ext4 "${DEVP}4"
    fi || return 1
    echo
}

mountall() {
    info "Setting main mount point to $MP"
    mkdir -p "$MP"
    echo

    # root
    info "Mounting ${DEVP}3 as root partition..."
    if [ -e "${DEVP}3" ]; then
        mount "${DEVP}3" "$MP" &&
            mkdir -p "$MP/boot" &&
            mkdir -p "$MP/home"
    else
        err "${DEVP}3 not found"
        return 1
    fi || return 1
    echo

    # boot
    info "Mounting ${DEVP}1 as boot partition..."
    if [ -e "${DEVP}1" ]; then
        mount "${DEVP}1" "$MP/boot"
    else
        err "${DEVP}1 not found"
        return 1
    fi || return 1
    echo

    # home (optional)
    if [ -e "${DEVP}4" ]; then
        info "Mounting ${DEVP}4 as home partition..."
        mount "${DEVP}4" "$MP/home"
    echo
    fi || return 1

    # swap
    info "Enabling ${DEVP}2 as swap..."
    if [ -e "${DEVP}2" ]; then
        swapon "${DEVP}2"
    else
        err "${DEVP}2 not found"
        return 1
    fi || return 1
    echo
}

installarch() {
    pacs='base base-devel networkmanager grub efibootmgr'
    info "Updating keyrings..."
    if is_parabola; then
        pacman -Sy archlinux-keyring parabola-keyring
        pacs="$pacs linux-libre linux-libre-firmware"
        pacs="$pacs your-freedom your-privacy"
    else
        pacman -Sy archlinux-keyring
        pacs="$pacs linux linux-firmware"
    fi || return 1

    info "Installing packages..."
    # shellcheck disable=SC2086
    pacstrap "$MP" $pacs
    echo
}

fstabstuff() {
    genfstab -U "$MP" >> "$MP/etc/fstab"
}

dochroot() {
    cp "$SELF" "$MP/usr/bin/$NAME"
    chmod +x "$MP/usr/bin/$NAME"
    arch-chroot "$MP" sh -c "$(vars --all); '$NAME' --eval inchroot"
}

inchroot() {
    if is_parabola; then
        info "Installing Parabola's freedom and privacy..."
        printf '[nonprism]\nInclude = /etc/pacman.d/mirrorlist\n' \
               > /etc/pacman.conf
        pacman -Sy your-freedom your-privacy
    fi

    info "Adding user $USERNAME and setting password..."
    useradd -m -g wheel "$USERNAME" || return 1
    printf '%s\n%s\n' "$PASSWORD" "$PASSWORD" |
        passwd "$USERNAME" || return 1
    echo

    info 'Setting root password...'
    printf '%s\n%s\n' "$PASSWORD" "$PASSWORD" |
        passwd || return 1
    echo

    info "Setting hostname to $HOSTNAME..."
    echo "$HOSTNAME" > /etc/hostname
    echo

    info "Setting timezone to $ZONE..."
    ln -sf "/usr/share/zoneinfo/$ZONE" /etc/localtime
    echo

    info 'Setting locale...'
    echo 'LANG=en-US.UTF-8' > /etc/locale.conf
    echo "LC_ALL=en_US.UTF-8" >> /etc/environment
    echo "$LOCALES" | tr ':' '\n' | while read -r l; do
        uncomment "$l" /etc/locale.gen
        info "Enabled $l"
    done
    locale-gen || return 1
    echo

    info 'Enabling network manager...'
    systemctl enable NetworkManager
    echo

    info 'Installing GRUB...'
    grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB "$DEV" &&
        grub-install --target=i386-pc "$DEV" &&
        grub-mkconfig -o /boot/grub/grub.cfg
    echo

    info 'Enabling wheel group in sudoers...'
    uncomment '%wheel ALL=(ALL:ALL) ALL' /etc/sudoers

    if [ "$INSTALL_DOTS" ]; then
        # my dotfiles installer uses sudo a lot :)
        info 'Enabling no password sudo...'
        uncomment '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' /etc/sudoers
        echo

        info 'Installing dots...'
        curl https://raw.githubusercontent.com/Naheel-Azawy/naheel-dotfiles/master/install.sh > /tmp/nd.sh
        yes yes | sudo -u "$USERNAME" sh /tmp/nd.sh base base-gui
        echo

        info 'Disabling no password sudo...'
        comment '%wheel ALL=(ALL:ALL) NOPASSWD: ALL' /etc/sudoers
        echo
    fi

    info 'Exitting shell...'
    echo
}

unmountall() {
    info "Syncing..."
    sync
    info "Unmounting all..."
    umount -R "$MP"
    swapoff "${DEVP}2"
    rmdir "$MP"
}

tui() {
    export NEWT_COLORS='root=,black'

    box() {
        whiptail "$@" 10 50 3>&1 1>&2 2>&3
    }

    inputbox() {
        whiptail --inputbox "$1" 10 50 "$2" 3>&1 1>&2 2>&3
    }

    passwordbox() {
        whiptail --passwordbox "$1" 10 50 3>&1 1>&2 2>&3
    }

    menubox() {
        eval "whiptail --menu '$1' 20 50 10 $2" \
             3>&1 1>&2 2>&3
    }

    yesno() {
        whiptail --yesno "$1" 7 50 3>&1 1>&2 2>&3
    }

    msgbox() {
        whiptail --msgbox "$1" 7 50 3>&1 1>&2 2>&3
    }

    msgbox 'Welcome to Arch/Parabola installer script'

    # TODO: add an option for a quick install skipping all questions

    DEV=
    devs=$(lsblk -rpno name,type | tac |
               awk '$2 == "disk" {printf "\"%s\" \"\" ", $1}')
    DEV=$(menubox 'Select a device:' "$devs")
    [ -z "$DEV" ] && return 1

    MP=$(inputbox 'Mount point:' "$MP")
    [ -z "$MP" ] && return 1

    USERNAME=
    USERNAME=$(inputbox 'Username:')
    [ -z "$USERNAME" ] && return 1

    PASSWORD=
    while :; do
        pass1=$(passwordbox 'Password:')
        pass2=$(passwordbox 'Re-enter password:')

        if [ -z "$pass1" ]; then
            msgbox 'Enter a non-empty password'
        elif [ "$pass1" != "$pass2" ]; then
            msgbox 'Passwords do not match. Try again...'
        else
            break
        fi
    done
    PASSWORD="$pass1"

    HOSTNAME=
    HOSTNAME=$(inputbox 'Host name:')
    [ -z "$HOSTNAME" ] && return 1

    zone_dir=
    dirs=$(ls -l --color=never /usr/share/zoneinfo/)
    dirs=$(echo "$dirs" | grep '^d' | awk '{printf "\"%s\" \"\" ", $NF}')
    msg='Set timezone'
    zone_dir=$(menubox "$msg" "$dirs")
    [ -z "$zone_dir" ] && return 1

    ZONE=
    zones=$(ls -1 --color=never "/usr/share/zoneinfo/$zone_dir")
    zones=$(echo "$zones" | awk '{printf "\"%s\" \"\" ", $NF}')
    ZONE=$(menubox "$msg" "$zones")
    ZONE="$zone_dir/$ZONE"
    [ -z "$ZONE" ] && return 1

    # TODO: add options to install
    # - xfce: pacman -S xorg xfce4 xfce4-goodies; echo 'exec startxfce4' > ~/.xinitrc
    # - gnome?
    # - pre-built install of your dots?
    INSTALL_DOTS=$(yesno 'Install dotfiles?' && echo 1)

    return 0
}

main() {
    [ "$1" = --eval ] && {
        shift
        "$@"
        return
    }

    check_root

    command -v pacstrap >/dev/null || {
        info 'Installing Arch install scripts'
        pacman -S arch-install-scripts
    }

    tui  || return 1
    vars || return 1
    echo

    printf "${E}WARNING:${R} everything under %s will be erased\n" "$DEV"
    printf 'Are you sure? (y/N) '
    read -r ans
    case "$ans" in
        y|Y) ;;
        *)   return 0 ;;
    esac
    echo

    case "$DEV" in
        /dev/mmcblk0|/dev/nvme0n1)
            DEVP="${DEV}p" ;;
        *)
            DEVP="$DEV" ;;
    esac

    # TODO: check DEV is mbr and not gpt and add an option to convert
    # gdisk "$DEVP"
    # r
    # g
    # w

    echo 'Partition your disk as follows:'
    echo "- ${DEVP}1: boot"
    echo "- ${DEVP}2: swap"
    echo "- ${DEVP}3: root"
    echo "- ${DEVP}4: home (optional)"
    echo 'Press enter to proceed'
    read -r
    echo

    # TODO: add auto partitioning as a default option
    # installation types:
    #
    # - tiny: (disk < 8G and ram < 2G)
    #   - no swap
    #   - one part
    #   - dots base
    #
    # - mini: (disk ~ 8G and ram >= 2G)
    #   - no swap
    #   - boot and root
    #   - dots base base-gui
    #
    # - normal: (disk >> (8G + 2 * ram) and ram >= 2G)
    #   - swap 200% of ram
    #   - enable hibernation
    #   - boot, root, and home
    #   - dots base base-gui

    cfdisk "$DEV"
    echo

    if [ -e "$DEV" ] &&
           [ -e "${DEVP}1" ] &&
           [ -e "${DEVP}2" ] &&
           [ -e "${DEVP}3" ]; then
        info 'Partitions seems to be ok'
    else
        err 'bad partitioning'
        ls "${DEVP}1"
        ls "${DEVP}2"
        ls "${DEVP}3"
        return 1
    fi
    echo

    info 'Installation will start now'
    echo 'Press enter to proceed'
    read -r
    echo

    start=$(date) &&
        mkfss &&
        mountall &&
        installarch &&
        fstabstuff &&
        dochroot
    status=$?

    end=$(date)
    printf '\033[1m\033[34mSTARTED AT\033[0m  %s\n' "$start"
    printf '\033[1m\033[34mFINISHED AT\033[0m %s\n' "$end"

    unmountall

    [ $status = 0 ] || err 'Installation faild :('

}

main "$@"

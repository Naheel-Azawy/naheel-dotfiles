#!/bin/bash
# Finds the reference, add the bibleography to $BIB, record history in $BIB.hist,
# and copy the label to the clipboard.
#
# Providing no arguments will look for details from the current x window
# If the provided argument is a pdf file the details will be extracted from it,
# otherwise the arguments will be the query string.
#
# Tested with chromium, firefox, evince, and zathura.
#
# Sources: crossref, google scholar
# Depends on: xprop, xdotool, xclip, pdfinfo, pdftotext, python2.7,
#             notify-send, dmenu, pandoc, pandoc-citeproc
#
# Written by Naheel Azawy: https://github.com/Naheel-Azawy/naheel-dotfiles
# Crossref part from Luke Smith: https://github.com/LukeSmithxyz/voidrice
#
# To install pandoc on OS X
# brew install pandoc
# brew install pandoc-citeproc


# if only the final formatted citation is needed
CITE_ONLY=0
[[ "$1" == '-c' ]] && {
    CITE_ONLY=1
    shift
    IEEE_URL='https://www.zotero.org/styles/ieee'
    IEEE_DIR="$HOME/.nbib"
    [[ ! -f "$IEEE_DIR/ieee.csl" ]] && {
        mkdir -p "$IEEE_DIR"
        echo "Downloading IEEE citation style..."
        curl "$IEEE_URL" > "$IEEE_DIR/ieee.csl"
    }
    BIB=/tmp/__tmpbib.bib
    TMP_TEX='/tmp/__bib_tmp.tex'
}

TITLE=''
DOI=''
NOTIF=$(which notify-send &>/dev/null && echo 1 || echo 0)
FILE="$1"
MENU=0

# if $BIB not found, take the default
[[ "$BIB" == '' ]] && {
    BIB="$HOME/Documents"
    mkdir -p "$BIB"
    BIB="$BIB/refs.bib"
}

# create a scripts directory if needed
[[ "$DOTFILES_SCRIPTS" == '' ]] && \
    DOTFILES_SCRIPTS="$HOME/.dotfiles/scripts"
mkdir -p "$DOTFILES_SCRIPTS"

# double checking 'clipboard'
CLIPBOARD='clipboard'
command -v clipboard >/dev/null || {
    CLIPBOARD="bash '$DOTFILES_SCRIPTS/clipboard'"
    [[ -f "$DOTFILES_SCRIPTS/clipboard" ]] || {
        echo "clipboard not found! Downloading to $DOTFILES_SCRIPTS/clipboard"
        curl 'https://raw.githubusercontent.com/Naheel-Azawy/naheel-dotfiles/master/scripts/clipboard' > "$DOTFILES_SCRIPTS/clipboard"
    }
}

# double checking 'scholar.py'
SCHOLARPY='scholar.py'
command -v scholar.py >/dev/null || {
    SCHOLARPY="python2.7 '$DOTFILES_SCRIPTS/scholar.py'"
    [[ -f "$DOTFILES_SCRIPTS/scholar.py" ]] || {
        echo "scholar.py not found! Downloading to $DOTFILES_SCRIPTS/scholar.py"
        curl 'https://raw.githubusercontent.com/Naheel-Azawy/naheel-dotfiles/master/scripts/scholar.py' > "$DOTFILES_SCRIPTS/scholar.py"
    }
}

# if menu-interface is not there then just use normal dmenu
command -v menu-interface >/dev/null || function menu-interface {
        dmenu "$@"
    }

# the final action
function finalize {
    if [[ $CITE_ONLY == 0 ]]; then
        echo -n "$1" | eval "$CLIPBOARD"
    else
        echo "\cite{$1}
\printbibliography" > "$TMP_TEX"
        pandoc --bibliography="$BIB" --filter pandoc-citeproc --csl "$IEEE_DIR/ieee.csl" "$TMP_TEX" -o bib.docx
    fi
    exit
}

# If no arguments
[[ "$@" == '' ]] && {
    MENU=1
    NOTIF=1
    # x window details
    WIN=$(xprop -id $(xdotool getactivewindow))
    # x window title
    TITLE=$(echo "$WIN" | sed -E -n 's/_NET_WM_NAME\(UTF8_STRING\) = "(.*)"/\1/p' | \
                sed 's/ - Chromium//g' | \
                sed 's/ - Mozilla Firefox//g')
    # if the title is the pdf file name, ...
    echo "$TITLE" | grep '\.pdf' &>/dev/null && TITLE=''
    # find the file path
    # get the PID from the x window
    PID=$(echo "$WIN" | sed -E -n 's/_NET_WM_PID\(CARDINAL\) = (.*)/\1/p')
    # and then find the full file path from the process commandline
    FILE=$(cat -v /proc/$PID/cmdline | sed -E -n 's/.+\^@(.+)\^@/\1/p')
    # $FILE might be only the file name and not the full path
    # if $FILE does not exist, try to get the working directory
    # of the parent process and add it to the name
    [[ ! -f "$FILE" ]] && {
        PARENT_DIR=$(readlink /proc/$(ps -p $PID -o ppid --no-headers)/cwd)
        FILE="$PARENT_DIR/$FILE"
    }
    # the title will be found in the next condition
}

# if the file was given as an argument or from the previous condition
[[ -f "$FILE" ]] && {
    PDF=$(pdfinfo "$FILE")
    # get the pdf title
    TITLE2=$(echo "$PDF" | sed -E -n 's/Title:\s*(.*)/\1/p')
    # if no title was found find the subject
    [[ "$TITLE2" == '' ]] && \
        TITLE2=$(echo "$PDF" | sed -E -n 's/Subject:\s*(.*)/\1/p')
    # if still not found then try to find it from the content
    [[ "$TITLE2" == '' ]] && \
        TITLE2=$(pdftotext -layout "$FILE" - | head -n 3 | xargs \
                    | sed 's/ /\n/g' | head -n 20 | xargs)
    # try to find the DOI
    DOI=$(echo "$PDF" | grep -o doi:.*) || # from the pdf info
	      DOI=$(pdftotext "$FILE" - | grep -o doi.* -m 1) # or from the content
    # if original TITLE was not found
    [[ $TITLE == '' ]] && {
        TITLE="$TITLE2"
        TITLE2=''
    }
    # if TITLE and TITLE2 are the same, keep only one
    [[ "$TITLE" == "$TITLE2" ]] && {
        TITLE2=''
    }
}

# if still nothing is found then take the args as a title
[[ "$TITLE" == '' ]] && \
    TITLE="$@"

# show menu
[[ $MENU == 1 ]] && {
    M="$TITLE"
    [[ $M != '' ]] && M="$M\n"
    [[ $TITLE2 != '' ]] && M="${M}$TITLE2\n"
    M="${M}$(clipboard)"
    TITLE=$(echo -e "$M" | menu-interface -i -l 20 -p 'Cite: ') || exit 1
}

# nothing was found
[[ "$TITLE" == '' ]] && {
    [[ $NOTIF == 1 ]] && \
        notify-send "No title was found from the current window<br>File: $FILE"
    echo "No title was found from the current window"
    exit 1
}

# bib or pdf
[[ $MENU == 1 ]] && {
    echo -e 'Get bibliography\nGet PDF' | \
        menu-interface -i -p "${TITLE:0:20}" | grep -q PDF && {
        [[ $NOTIF == 1 ]] && notify-send "Finding PDF for $TITLE"
        S=$(eval "$SCHOLARPY" -c 1 --phrase \""$TITLE"\")
        PDF=$(echo "$S" | sed -rn 's@PDF link .*http(.+)@http\1@p' | xargs)
        [[ "$PDF" == '' ]] && {
            PDF=$(echo "$S" | sed -rn 's@URL .*http(.+)@http\1@p' | xargs)
            PDF="https://sci-hub.tw/$PDF"
        }
        $BROWSER "$PDF"
        exit 0
    }
}

# look into the history file
HIST=$(grep "$TITLE" "$BIB.hist" 2>/dev/null)
[[ "$HIST" != '' ]] && {
    [[ $NOTIF == 1 ]] && \
        notify-send "Bib found for $TITLE from history<br>$LABEL"
    LABLE=$(echo "$HIST" | awk '{print $2}' | tr -d '\n')
    finalize "$LABLE"
}

[[ $NOTIF == 1 ]] && \
    notify-send "Searching for $TITLE"

# look for the DOI if found
[[ "$DOI" == '' ]] && \
    DOI=$(echo "$TITLE" | grep -o doi:.*)

# Check crossref.org for the bib citation.
[[ "$DOI" != '' ]] && \
    B=$(curl -s "http://api.crossref.org/works/$DOI/transform/application/x-bibtex" -w "\n" | \
            sed -e "/^[^\(\t\|@\|}\)]/d")

# search google scholar if not found from crossref
[[ "$B" == '' ]] && \
    B=$(eval "$SCHOLARPY" -c 1 --citation bt --phrase \""$TITLE"\")

[[ "$B" == '' ]] && {
    echo 'Not found'
    [[ $NOTIF == 1 ]] && \
        notify-send "Couldn't find $TITLE"
    exit 1
}

FTITLE="$TITLE"
LABEL=$(echo  "$B" | head -n1 | sed -E -n 's/.+\{(.+),/\1/p')
TITLE=$(echo  "$B" | sed -E -n 's/\s+title\s*=\s*\{(.+)\},/\1/p')
AUTHOR=$(echo "$B" | sed -E -n 's/\s+author\s*=\s*\{(.+)\},/\1/p')
YEAR=$(echo   "$B" | sed -E -n 's/\s+year\s*=\s*\{?(.+)\}?,/\1/p')

# write to history file
echo "$(date '+%Y-%m-%d-%H:%M:%S') $LABEL $FTITLE" >> "$BIB.hist"

[[ $NOTIF == 1 ]] && \
    notify-send "Bib found for $TITLE by $AUTHOR ($YEAR)<br>$LABEL"

# write to bib file if not already there
if ! grep -q "$LABEL" "$BIB" &>/dev/null; then
    echo "$B" >> "$BIB"
    echo >> "$BIB"
fi

# copy the label to the clipboard
finalize "$LABEL"


#!/usr/bin/env python3

# bring back the only one thing I miss from unity,
# the Head-Up Display (HUD) menu
# based on https://github.com/RafaelBocquet/i3-hud-menu
#
# don't forget to add:
# eval "$(hud env)"
#
# start the daemon with `hud daemon` and run `hud` to show the menu
#
# TODO: integrate with `launcher` and keep as a seperate repo
# DONE: integrate plotinus https://github.com/p-e-w/plotinus

import dbus
import pydbus # you don't need both...
import subprocess
import sys
import os
import re

def start_service():
    import gi
    gi.require_version("Gtk", "3.0")
    from gi.repository import Gtk
    import dbus.service
    from dbus.mainloop.glib import DBusGMainLoop

    class Service(dbus.service.Object):
        def __init__(self):
            bus_name = dbus.service.BusName("com.canonical.AppMenu.Registrar", bus = dbus.SessionBus())
            dbus.service.Object.__init__(self, bus_name, "/com/canonical/AppMenu/Registrar")
            self.window_dict = dict()

        @dbus.service.method("com.canonical.AppMenu.Registrar",
                             in_signature="uo",
                             sender_keyword="sender")
        def RegisterWindow(self, windowId, menuObjectPath, sender):
            self.window_dict[windowId] = (sender, menuObjectPath)

        @dbus.service.method("com.canonical.AppMenu.Registrar",
                             in_signature="u",
                             out_signature="so")
        def GetMenuForWindow(self, windowId):
            if windowId in self.window_dict:
                sender, menuObjectPath = self.window_dict[windowId]
                return [dbus.String(sender), dbus.ObjectPath(menuObjectPath)]

        @dbus.service.method("com.canonical.AppMenu.Registrar")
        def Q(self):
            Gtk.main_quit()

    # start plotinus service
    os.system("gsettings set com.worldwidemann.plotinus:/com/worldwidemann/plotinus/default/ dbus-enabled true")
    os.popen("pgrep plotinus || plotinus")

    # start dbus main service
    DBusGMainLoop(set_as_default=True)
    myservice = Service()
    Gtk.main()

def dmenu(items, main_bar=[]):
    # main_bar = set(main_bar)
    # like a set, but keeps order
    main_bar_tmp = {}
    for item in main_bar:
        main_bar_tmp[item] = 1
    main_bar = list(main_bar_tmp.keys())
    dmenu_string = ""
    if len(main_bar) > 0:
        dmenu_string += " | ".join(main_bar) + "\n"
    dmenu_string += "\n".join(items.keys())
    cmd = "menu-interface"
    if subprocess.call(["which", cmd],
                       stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE) != 0:
        cmd = "dmenu"
    dmenu_cmd = subprocess.Popen([cmd, "-i", "-l", "20"],
                                 stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    dmenu_cmd.stdin.write(dmenu_string.encode())
    dmenu_result = dmenu_cmd.communicate()[0].decode().strip()
    dmenu_cmd.stdin.close()
    return dmenu_result

def format_label_list(label_list):
    return "| " + " â†’ ".join(label_list).replace("_", "")

def xprop(window_id, notype):
    res = subprocess.check_output(["xprop", "-id", window_id,
                                   "-notype", notype]).decode()
    try:
        return re.search('.+ = "(.+)"', res)[1]
    except:
        return None

class NopeException(Exception):
    pass

def plotinus_interface(window_id):
    gtk_path = xprop(window_id, "_GTK_WINDOW_OBJECT_PATH")
    if gtk_path is None:
        raise NopeException()

    bus = pydbus.SessionBus()
    try:
        plotinus = bus.get("com.worldwidemann.plotinus")
    except:
        raise NopeException()
    bus_name, command_paths = plotinus.GetCommands(gtk_path)
    commands = [bus.get(bus_name, command_path) for command_path in command_paths]

    actions = {}
    for i, command in enumerate(commands):
        path = command.Path + [command.Label]
        path.pop(0)
        l = format_label_list(path)
        actions[l] = command

    # Run dmenu
    dmenu_result = dmenu(actions)

    # Use dmenu result
    if dmenu_result in actions:
        actions[dmenu_result].Execute()

# FIXME: inactive items are shown normally

def gtk_interface(window_id):
    gtk_bus_name = xprop(window_id, "_GTK_UNIQUE_BUS_NAME")
    gtk_object_path = xprop(window_id, "_GTK_MENUBAR_OBJECT_PATH")

    if None in [gtk_bus_name, gtk_object_path]:
        raise NopeException()

    # Ask for menus over DBus
    session_bus = dbus.SessionBus()
    gtk_menubar_object = session_bus.get_object(gtk_bus_name, gtk_object_path)
    gtk_menubar_object_iface = dbus.Interface(gtk_menubar_object, dbus_interface="org.gtk.Menus")
    gtk_action_object_actions_iface = dbus.Interface(gtk_menubar_object, dbus_interface="org.gtk.Actions")
    gtk_menubar_results = gtk_menubar_object_iface.Start([x for x in range(1024)])

    # Construct menu list
    gtk_menubar_menus = {}
    for gtk_menubar_result in gtk_menubar_results:
        gtk_menubar_menus[(gtk_menubar_result[0], gtk_menubar_result[1])] = gtk_menubar_result[2]

    main_bar = []
    actions = {}
    targets = {}

    def explore_menu(menu_id, label_list=[]):
        if menu_id not in gtk_menubar_menus:
            return
        for menu in gtk_menubar_menus[menu_id]:
            if "label" in menu:
                menu_label = menu["label"]
            else:
                menu_label = "?"

            new_label_list = label_list + [menu_label]
            formatted_label = format_label_list(new_label_list)

            if len(new_label_list) == 1 and menu_label != "?":
                main_bar.append(new_label_list[0].replace("_", ""))

            if "accel" in menu and menu["accel"]:
                formatted_label += f" ({menu['accel']})"

            if ":section" in menu:
                menu_section = menu[":section"]
                section_menu_id = (menu_section[0], menu_section[1])
                explore_menu(section_menu_id, label_list)

            if ":submenu" in menu:
                menu_submenu = menu[":submenu"]
                submenu_menu_id = (menu_submenu[0], menu_submenu[1])
                explore_menu(submenu_menu_id, new_label_list)

            if ":section" not in menu and \
               ":submenu" not in menu and \
               "action" in menu:
                menu_action = menu["action"]
                actions[formatted_label] = menu_action
                if "target" in menu:
                    menu_target = menu["target"]
                    targets[formatted_label] = menu_target

    explore_menu((0, 0))

    # Run dmenu
    dmenu_result = dmenu(actions, main_bar)

    # Use dmenu result
    if dmenu_result in actions:
        action = actions[dmenu_result].replace("unity.", "")
        # FIXME: fails for libreoffice
        gtk_action_object_actions_iface.Activate(action, [], {})

def appmenu_interface(window_id):
    # Get Appmenu Registrar DBus interface
    session_bus = dbus.SessionBus()
    appmenu_registrar_object = session_bus.get_object("com.canonical.AppMenu.Registrar",
                                                      "/com/canonical/AppMenu/Registrar")
    appmenu_registrar_object_iface = dbus.Interface(appmenu_registrar_object,
                                                    "com.canonical.AppMenu.Registrar")

    # Get dbusmenu object path
    try:
        dbusmenu_bus, dbusmenu_object_path = appmenu_registrar_object_iface.GetMenuForWindow(window_id)
    except dbus.exceptions.DBusException:
        return

    # Access dbusmenu items
    dbusmenu_object = session_bus.get_object(dbusmenu_bus, dbusmenu_object_path)
    dbusmenu_object_iface = dbus.Interface(dbusmenu_object, "com.canonical.dbusmenu")
    dbusmenu_items = dbusmenu_object_iface.GetLayout(0, -1, ["label"])

    main_bar = []
    actions = {}

    def explore_dbusmenu_item(item, label_list=[]):
        item_id = item[0]
        item_props = item[1]
        item_children = item[2]

        if 'label' in item_props:
            new_label_list = label_list + [item_props["label"]]
        else:
            new_label_list = label_list

        if len(new_label_list) == 1:
            main_bar.append(new_label_list[0].replace("_", ""))

        if len(item_children) == 0:
            if "label" in item_props:
                actions[format_label_list(new_label_list)] = item_id
        else:
            for child in item_children:
                explore_dbusmenu_item(child, new_label_list)

    explore_dbusmenu_item(dbusmenu_items[1])

    # Run dmenu
    dmenu_result = dmenu(actions, main_bar)

    # Use dmenu result
    if dmenu_result in actions:
        action = actions[dmenu_result]
        dbusmenu_object_iface.Event(action, "clicked", 0, 0)

def emacs_interface(window_id):
    win_class = xprop(window_id, "WM_CLASS")
    win_name = xprop(window_id, "WM_NAME")

    if None in [win_class, win_name] or \
       (not win_class.startswith("emacs") and \
        not win_name.startswith("emacs")):
        raise NopeException()

    lisp = """(string-join
      (let (l)
        (mapatoms
         #'(lambda (f) (and
                        (commandp f)
                        (setq l (cons (symbol-name f) l)))))
        (when (called-interactively-p 'any)
          (with-current-buffer (get-buffer-create "*Major Modes*")
            (clear-buffer-delete)
            (let ((standard-output (current-buffer)))
              (display-completion-list l)
              (display-buffer (current-buffer)))))
        l) " ")"""

    out = subprocess.check_output(["emacsclient", "-e", lisp])\
                    .decode().strip()
    # remove starting and ending quotes
    out = out[1:-1]

    actions = {}
    for cmd in out.split(" "):
        actions[cmd] = cmd

    # Run dmenu
    dmenu_result = dmenu(actions)

    # Use dmenu result
    if dmenu_result in actions:
        cmd = actions[dmenu_result]
        os.system(f"emacsclient -e '({cmd})'")

def emacs_lacarte_interface(window_id):
    # lacarte needs to be setup in emacs
    # https://www.emacswiki.org/emacs/download/lacarte.el

    win_class = xprop(window_id, "WM_CLASS")
    win_name = xprop(window_id, "WM_NAME")

    if None in [win_class, win_name] or \
       (not win_class.startswith("emacs") and \
        not win_name.startswith("emacs")):
        raise NopeException()

    out = subprocess.check_output(["emacsclient", "-e", "(lacarte-get-overall-menu-item-alist)"])\
                    .decode().strip()
    # remove starting and ending parens
    out = out[1:-1]

    main_bar = []
    actions = {}
    for line in out.split("\n"):
        # this is so bad and dirty, many are not matched
        # maybe a lisp parser?..
        m = re.search(' ?\(?\("(.+)" . (.+)\)', line)
        if m is not None:
            cmd = m[2]
            l = m[1].split(" > ")
            main_bar.append(l[0])
            l = format_label_list(l) + f" ({cmd})"
            actions[l] = cmd

    # Run dmenu
    dmenu_result = dmenu(actions, main_bar)

    # Use dmenu result
    if dmenu_result in actions:
        cmd = actions[dmenu_result]
        os.system(f"emacsclient -e '({cmd})'")

def main(args):
    if len(args) > 1:

        if args[1] == "daemon":
            start_service()
        elif args[1] == "env":
            print('export GTK_MODULES="$GTK_MODULES:appmenu-gtk-module"')
            print('PLOTINUS=$(whereis -b libplotinus | cut -d " " -f 2)')
            print('[ -f "$PLOTINUS" ] && export GTK_MODULES="$GTK_MODULES:$PLOTINUS"')
            print('export UBUNTU_MENUPROXY=1')

    else:
        window_id = subprocess.check_output(["xdotool", "getactivewindow"]) \
                              .decode().strip()
        window_title = subprocess.check_output(["xdotool", "getwindowname", window_id]) \
                                 .decode().strip()

        interfaces = [emacs_interface, plotinus_interface,
                      gtk_interface, appmenu_interface]

        for interface in interfaces:
            try:
                interface(window_id)
                return 0
            except NopeException:
                pass

        print("Could not find a menu interface")
        return 1

    return 0

exit(main(sys.argv))

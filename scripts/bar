#!/bin/python3

import sh
import os
import sys
import json
import re
import time
import datetime
import asyncio
import subprocess
import socket
import signal

try:
    import bidi.algorithm
    import arabic_reshaper
    use_arabic = True
except:
    use_arabic = False

background = '#ff000000'
foreground = '#ffffff'

default_items = "start workspaces add program | clock | systray lang pray weather temperature wifi battery power"

port_file = "/tmp/.nbarport"

argv = sys.argv
HOME = os.getenv("HOME")
WINDOW_MANAGER = os.getenv("WINDOW_MANAGER")

# example: WM(lambda wm: print(wm.json())).run()
class WM:
    def __init__(self, callback):
        wm = WINDOW_MANAGER
        if wm == "i3":
            self.impl = I3WM(callback)
        elif wm == "bspwm":
            self.impl = BSPWM(callback)
        else:
            raise Exception(f"Unknown window manager {wm}")

        self.title = None # to be set by bar.program()

        # names to be picked for new workspaces
        self.nice_workspaces = list(range(1, 10)) + [0]
        self.nice_workspaces = list(map(lambda i: str(i), self.nice_workspaces))

    async def run(self):
        await asyncio.to_thread(self.impl.run)

    def json(self):
        workspaces = {}
        for w in self.impl.workspaces:
            workspaces[w.name] = {
                "visible": w.visible,
                "focused": w.focused,
                "urgent":  w.urgent
            }
        return json.dumps({
            "title": self.title,
            "workspaces": workspaces
        })

    def lemon(self):
        circles = True
        out = ""
        # still not sure which to pick so I'm keeping both for now
        if circles:
            for w in self.impl.workspaces:
                if w.focused:
                    out += "%{F#ffffff}"
                elif w.visible:
                    out += "%{F#333333}"
                elif w.urgent:
                    out += "%{F#900000}"
                else:
                    out += "%{F#ffffff}"
                onclick = f"{self.impl.workspace_cmd} '{w.name}' >/dev/null"
                out += f"%{{A:{onclick}:}} "
                circle = "⬤" if w.focused or w.visible or w.urgent else "◯"
                out += circle
                out += " %{A}"
            out += "%{F-}" # reset the colors
        else:
            for w in self.impl.workspaces:
                if w.focused:
                    out += "%{F#000000 B#ffffff}"
                elif w.visible:
                    out += "%{F#ffffff B#333333}"
                elif w.urgent:
                    out += "%{F#ffffff B#900000}"
                else:
                    out += "%{F#ffffff B-}"
                onclick = f"{self.impl.workspace_cmd} '{w.name}' >/dev/null"
                out += f"%{{A:{onclick}:}} "
                out += w.name
                #.encode(encoding="ascii",errors="backslashreplace").decode()
                out += " %{A}"
            out += "%{F- B-}" # reset the colors
        return out

class WMImpl:
    def __init__(self):
        raise Exception("Unimplemented")

    def run(self):
        raise Exception("Unimplemented")

class Workspace:
    def __init__(self):
        self.name    = ""
        self.visible = False
        self.focused = False
        self.urgent  = False

class I3WM(WMImpl):
    def __init__(self, callback):
        self.callback = callback
        self.workspaces = []
        self.workspace_cmd = "i3-msg workspace"

    def update(self):
        j = json.loads(os.popen(
            "i3-msg -t get_workspaces").read())
        workspaces = []
        for item in j:
            w = Workspace()
            w.name    = item["name"]
            w.visible = item["visible"]
            w.focused = item["focused"]
            w.urgent  = item["urgent"]
            workspaces.append(w)
        self.workspaces = workspaces

    def run(self):
        self.update()
        self.callback(self)
        popen = subprocess.Popen(["i3-msg", "-t", "subscribe", "-m",
                                  '[ "workspace", "window" ]'],
                                 stdout=subprocess.PIPE,
                                 universal_newlines=True)
        for line in iter(popen.stdout.readline, ""):
            msg = json.loads(line)
            # workspace events
            try:
                workspace_event = msg["current"]["type"] == "workspace"
                if workspace_event:
                    self.update()
            except KeyError:
                workspace_event = False
            self.callback(self)
        popen.stdout.close()
        code = popen.wait()
        if code != 0:
            raise Exception(f"i3-msg exited with code {code}")

class BSPWM(WMImpl):
    def __init__(self, callback):
        self.callback = callback
        self.workspaces = []
        self.workspace_cmd = "bspc desktop -f"

    def run(self):
        popen = subprocess.Popen(["bspc", "subscribe", "report"],
                                 stdout=subprocess.PIPE,
                                 universal_newlines=True)
        for line in iter(popen.stdout.readline, ""):
            # check man bspc, REPORT FORMAT
            workspaces = []
            focused_monitor = False
            for item in line.split(":"):
                if item[0] == "W":
                    item = item[1:]
                if item[0] in ["M", "m"]:
                    focused_monitor = item[0] == "M"
                elif item[0] in ["O","o","F","U","u"]:
                    w = Workspace()
                    w.name    = item[1:]
                    w.visible = item[0] in ["O", "F"]
                    w.focused = w.visible and focused_monitor
                    w.urgent  = item[0] in ["U", "u"]
                    workspaces.append(w)
            self.workspaces = workspaces
            self.callback(self)
        popen.stdout.close()
        code = popen.wait()
        if code != 0:
            raise Exception(f"bspc exited with code {code}")

def item(period=0):
    """A decorator to simplify defining periodic functions"""
    def decorate(func):
        def wrapper(*args, **kwargs):
            if "period" in args:
                return period
            elif "name" in args:
                return func.__name__
            else:
                return func(*args, **kwargs)
        return wrapper
    return decorate

class BarBase:
    def __init__(self, use_ascii=False, items=None):
        self.server = None
        self.a = use_ascii
        self.wm = WM(self.run_wm_items)

        if items is None:
            self.items_str = default_items
        else:
            self.items_str = items

        places = re.split(r"\s*\|\s*", self.items_str)

        self.items_map = {"l": [], "c": [], "r": []}
        for i in range(len(places)):
            place = [getattr(self, m)
                     for m in re.split(r"\s+", places[i]) if m]
            if i == 0:
                self.items_map["l"] += place
            elif i == 1:
                self.items_map["c"] += place
            else:
                self.items_map["r"] += place

        self.items = self.items_map["l"] + \
            self.items_map["c"] + \
            self.items_map["r"]

        self.last = {}
        self.running = False
        self.coroutines = []
        self.tasks = None

    def print_items(self):
        for i in self.items:
            print(i("name"), i("period"))

    def render(self):
        out = ""

        if self.a:
            items_out = []
            for item in self.items:
                content = self.last[item("name")]
                if not content: continue
                items_out.append(content)
            out += " | ".join(items_out)
        else:
            for place in self.items_map:
                out += f"%{{{place}}}"
                items_out = []
                for item in self.items_map[place]:
                    content = self.last[item("name")]
                    if not content: continue
                    items_out.append(content)
                out += "  ".join(items_out)
            out += " "

        print(out)
        try:
            sys.stdout.flush()
        except BrokenPipeError:
            exit(1)

    def run_item(self, item):
        if item in self.items:
            self.last[item("name")] = item()

    async def run_periodic_item(self, item):
        if item not in self.items:
            return
        while self.running:
            self.run_item(item)
            self.render()
            # print(f">>>>> CALLED {item('name')}, sleeping {item('period')}\n")
            period = item("period")
            if period <= 0:
                break
            await asyncio.sleep(period)

    def run_wm_items(self, wm):
        self.run_item(self.workspaces)
        self.run_item(self.program)
        self.run_item(self.add)
        self.render()

    async def handle_connection(self, reader, writer):
        data = b""
        while True:
            tmp = await reader.read(1024)
            data += tmp
            if not tmp: break
        data = data.decode().split("?")
        cmd = data[0]
        data = data[1]
        if cmd == "update":
            item = getattr(self, data)
            self.last[item("name")] = item()
            self.render()

    def init(self):
        for item in self.items:
            self.run_item(item)

    async def run(self):
        if self.running:
            return
        self.running = True
        self.init()
        self.render()
        coroutines = []
        # window manager
        if self.wm is not None:
            coroutines.append(self.wm.run())
        # periodic items
        for item in self.items:
            if item("period") > 0:
                coroutines.append(self.run_periodic_item(item))
        # server
        server = await asyncio.start_server(
            self.handle_connection, "localhost", 0)
        port = server.sockets[0].getsockname()[1]
        with open(port_file, "w") as f:
            f.write(str(port))
        coroutines.append(server.serve_forever())
        self.tasks = asyncio.gather(*coroutines)
        try:
            await self.tasks
        except asyncio.CancelledError:
            pass

    def stop(self):
        self.running = False
        self.tasks.cancel()

class Bar(BarBase):

    @item()
    def workspaces(self):
        if self.wm is None or self.a:
            return None
        else:
            return self.wm.lemon()

    @item()
    def add(self):
        if self.wm is None or self.a or self.wm.title == "":
            return None
        names = list(map(lambda w: w.name, self.wm.impl.workspaces))
        for w in self.wm.nice_workspaces:
            if w not in names:
                onclick = f"{self.wm.impl.workspace_cmd} '{w}' >/dev/null"
                return f"%{{A:{onclick}:}}%{{A}}"
        return None

    @item()
    def program(self):
        try:
            title = sh.xdotool("getactivewindow", "getwindowname").strip()
            max_title = 55
            if len(title) > max_title:
                title = title[:max_title] + "..."
            if use_arabic:
                title = bidi.algorithm.get_display(
                    arabic_reshaper.reshape(title))
            if self.wm is not None:
                self.wm.title = title
            if self.a:
                return title
            else:
                out = ""
                if title:
                    return "%{A:wmctl nice-kill:}%{A}  " + \
                        "%{A:menus hud:}" + title + "%{A}"
                else:
                    return None
        except:
            if self.wm is not None:
                self.wm.title = ""
            return None

    @item(period=1)
    def clock(self):
        t = datetime.datetime.now().strftime("%a %Y.%m.%d %I:%M:%S %p")
        if self.a:
            return t
        else:
            cmd = "theterm -a '-c __floatme__ -g 70x35' 'cal -y && read -p \"\"'"
            return f"%{{A:{cmd}&:}}{t}%{{A}}"

    @item(period=3)
    def battery(self):
        try:
            acpi = sh.acpi("-b").strip()
            percent = int(acpi.split(", ")[1].replace("%", ""))
            charging = "Discharging" not in acpi
        except:
            return None

        if self.a:
            charging = "~" if charging else ""
            return f"b{charging}{percent}%"
        else:
            out = ""
            r = "-"

            if charging:
                r = '#FFFFFF' if percent >= 99 else '#FFD700'
                out += " "
            elif percent <= 20:
                if percent > 10:
                    r = '#FF0000'
                else:
                    r = '#000000'
                if percent <= 15:
                    out += " "

            if percent < 50:
                out += ""
            elif percent < 60:
                out += ""
            elif percent < 90:
                out += ""
            else:
                out += ""

            out += f" {percent}%"

            if percent <= 10 and not charging:
                msg = "%{B#FF0000} "
                if percent <= 5:
                    msg += "SHUTTING DOWN "
                    sh.systemctl("poweroff")
                elif percent <= 7:
                    msg += "WILL SHUTDOWN AT 5% "
                elif percent <= 10:
                    msg += "LOW BATTERY "
                out = msg + out + " %{B-}"

            cmd = "theterm -a '-c __floatme__ -g 75x3' 'watch -tn 1 acpi -i'"
            out = f"%{{F{r}}}%{{A:{cmd}&:}}{out}%{{A}}%{{F-}}"

            return out

    @item(period=5)
    def wifi(self):
        try:
            with open("/proc/net/wireless") as f:
                v = re.split(r"\s+", f.read().split("\n")[2])[2]
                v = int(float(v))
                if self.a:
                    return f"s{v}%"
                else:
                    return f"%{{A:networkmanager_dmenu&:}} {v}%%{{A}}"
        except:
            pass
        return None

    @item()
    def lang(self):
        try:
            out = sh.lang().strip()
        except:
            return None
        if self.a:
            return out
        else:
            return f"%{{A:lang tog:}}{out}%{{A}}"

    @item(period=30)
    def pray(self):
        out = os.popen("theprayer n 2>/dev/null").read().strip()
        if not out:
            return None
        if self.a:
            return f"p{out}"
        else:
            cmd = "theterm -a '-c __floatme__ -g 25x8' 'theprayer && read -p \"\"'"
            return f"%{{A:{cmd}&:}}  {out}%{{A}}"

    @item(period=30 * 60)
    def weather(self):
        f = f"{HOME}/.cache/weatherreport"
        if not os.path.exists(f):
            return None

        with open(f, "rb") as f:
            out = f.read().decode(errors="ignore") \
                          .split("\n")[3] # third line
            # remove colors https://stackoverflow.com/a/14693789/3825872
            r = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
            out = r.sub("", out).strip()
            s = re.search(".+[ \.](\d+) °C", out) # extract the temperature
            try:
                out = f"{s.group(1)}°C"
            except:
                return None

            if self.a:
                return f"w{out}"
            else:
                cmd = "theterm -a '-c __floatme__ -g 63x38' 'weather-update & head -n 37 ~/.cache/weatherreport && read -p \"\"'"
                return f"%{{A:{cmd}&:}}  {out}%{{A}}"

        return None

    @item(period=5)
    def temperature(self):
        try:
            o = json.loads(sh.sensors("coretemp-isa-0000", "-j").strip()) \
                ["coretemp-isa-0000"]["Package id 0"]
            t = float(o["temp1_input"])
            m = float(o["temp1_max"])
        except:
            return None

        percent = int((t / m) * 100)
        if percent < 70:
            return None

        if self.a:
            return f"t{int(t)}°C"
        else:
            out = ""
            if percent > 90:
                out += "%{F#FF0000} "
            elif percent > 50:
                out += ""
            elif percent > 40:
                out += ""
            else:
                out += ""
            out += f"%{{F-}} {int(t)}°C"
            cmd = "theterm -a '-c __floatme__ -g 65x19' 'watch -tn 1 sensors'"
            return f"%{{A:{cmd}&:}}{out}%{{A}}"

    @item()
    def start(self):
        return "%{A:menus&:} START%{A}" if not self.a else None

    @item()
    def power(self):
        return "%{A:menus power&:}%{A}" if not self.a else None

    @item()
    def systray(self):
        return "%{A:toggle-systray&:}%{A}" if not self.a else None

    @item()
    def donno(self):
        return "%{A:theterm 'lolcowforune -p'&:}¯\_(ツ)_/¯%{A}" \
            if not self.a else None

    @item()
    def host(self):
        return os.uname()[1]

def lemonbar():
    bin = os.path.abspath(__file__)

    try: # try to get the x geometry from xrandr
        match = re.search(r"connected primary \d+x\d+(\+\d+)\+\d+ ",
                          sh.xrandr("-q").strip())
        geometry = f"-g {match.group(1)}+0"
    except:
        geometry = ""

    # main font
    fonts = []
    f = os.getenv("FONT")
    if f:
        fonts.append(f)

    # additional fonts
    fonts += [
        # "Kawkab Mono:pixelsize=12",
        "Source Han Sans CN",
        "DejaVu Sans Mono",
        "Font Awesome 5 Free Solid:pixelsize=19",
        "Hack Nerd Font"
    ]

    tmp = ""
    for f in fonts:
        tmp += f"-f '{f}' "
    fonts = tmp

    os.system(f"""python3 '{bin}' -p |
    lemonbar {geometry} -p {fonts} -B '{background}' -F '{foreground}' -a 30 |
    sh""")

async def main():
    if len(argv) >= 2 and argv[1] == "lemon":
        lemonbar()
    elif len(argv) >= 3 and argv[1] == "update":
        item = argv[2].encode()
        with open(port_file, "r") as f:
            try:
                port = int(f.read())
                reader, writer = await asyncio.open_connection("localhost", port)
                writer.write(b"update?" + item)
                writer.close()
            except:
                print("Error finding socket port")
    else:
        a = False # ascii
        p = False # persistent
        items = None

        if len(argv) >= 2 and argv[1] == "-a":
            a = True
            del argv[1]

        if len(argv) >= 2 and argv[1] == "-p":
            p = True
            del argv[1]

        if len(argv) >= 2 and argv[1]:
            items = argv[1]

        bar = Bar(use_ascii=a, items=items)
        if p:
            signal.signal(signal.SIGINT, lambda signal, frame: bar.stop())
            await bar.run()
        else:
            bar.init()
            bar.render()

if __name__ == "__main__":
    asyncio.run(main())

#!/bin/bash

time_dura=$I3BLOCKS_DUR_TIME
batt_dura=$I3BLOCKS_DUR_BATT
wifi_dura=$I3BLOCKS_DUR_WIFI
brig_dura=$I3BLOCKS_DUR_BRIG
volu_dura=$I3BLOCKS_DUR_VOLU
sens_dura=$I3BLOCKS_DUR_SENS
weat_dura=$I3BLOCKS_DUR_WEAT
pray_dura=$I3BLOCKS_DUR_PRAY
lang_dura=$I3BLOCKS_DUR_LANG

[[ "$time_dura" == '' ]] && time_dura='1'
[[ "$batt_dura" == '' ]] && batt_dura='1'
[[ "$wifi_dura" == '' ]] && wifi_dura='5'
[[ "$brig_dura" == '' ]] && brig_dura='once'
[[ "$volu_dura" == '' ]] && volu_dura='once'
[[ "$sens_dura" == '' ]] && sens_dura='3'
[[ "$weat_dura" == '' ]] && weat_dura='1800'
[[ "$pray_dura" == '' ]] && pray_dura='10'
[[ "$lang_dura" == '' ]] && lang_dura='once'

time_sig=$I3BLOCKS_SIG_TIME
batt_sig=$I3BLOCKS_SIG_BATT
wifi_sig=$I3BLOCKS_SIG_WIFI
brig_sig=$I3BLOCKS_SIG_BRIG
volu_sig=$I3BLOCKS_SIG_VOLU
sens_sig=$I3BLOCKS_SIG_SENS
weat_sig=$I3BLOCKS_SIG_WEAT
pray_sig=$I3BLOCKS_SIG_PRAY
lang_sig=$I3BLOCKS_SIG_LANG
firs_sig=$I3BLOCKS_SIG_FIRS
last_sig=$I3BLOCKS_SIG_LAST

[[ "$time_sig" == '' ]] && time_sig='1'
[[ "$batt_sig" == '' ]] && batt_sig='2'
[[ "$wifi_sig" == '' ]] && wifi_sig='3'
[[ "$brig_sig" == '' ]] && brig_sig='4'
[[ "$volu_sig" == '' ]] && volu_sig='5'
[[ "$sens_sig" == '' ]] && sens_sig='6'
[[ "$weat_sig" == '' ]] && weat_sig='7'
[[ "$pray_sig" == '' ]] && pray_sig='8'
[[ "$lang_sig" == '' ]] && lang_sig='9'
[[ "$firs_sig" == '' ]] && firs_sig=$time_sig
[[ "$last_sig" == '' ]] && last_sig=$lang_sig

time_last=''
batt_last=''
wifi_last=''
brig_last=''
volu_last=''
sens_last=''
weat_last=''
pray_last=''
lang_last=''

time_prev=''
batt_prev=''
wifi_prev=''
brig_prev=''
volu_prev=''
sens_prev=''
weat_prev=''
pray_prev=''
lang_prev=''

selected=$(cat /tmp/bar-selected 2> /dev/null)

function update {
    pkill -RTMIN+$1 i3blocks
}

function update-all {
    for sig in $(seq $firs_sig $last_sig); do
        update $sig
    done
}

function sig2name {
    (set -o posix ; set) | grep _sig | grep "$1" | grep -v firs | grep -v last | sed -rn 's/(.+)_sig=.+/\1/p'
}

number_file='/tmp/__bar-show-numbers'
number=$(test -f "$number_file" && echo 1 || echo 0)
justaclick=0
args=($@)
for i in ${!args[@]}; do
    arg=${args[$i]}
    case $arg in
        -a|--ascii)  a='-a'; args[$i]='';;
        -l|--loop)   l=1; args[$i]='';;
        -s|--select) s=${args[$i+1]}; args[$i]=''; args[$((i + 1))]='';;
        --number)
            touch "$number_file"
            update-all
            exit;;
        --unnumber)
            rm -f "$number_file"
            update-all
            exit;;
        -u|--update)
            update-all
            exit;;
        -k|--click)
            justaclick=$(sig2name ${args[$i+1]})
            args[$i]=''; args[$((i + 1))]=''
            break;;
        -r|--run)
            [[ "$selected" = "" ]] && exit
            rm -f /tmp/bar-selected
            update-all
            env BLOCK_BUTTON=1 bar $selected
            exit;;
    esac
done
b=${args[@]}
b=($b)
bb=(lang pray weat sens volu brig wifi batt time)
bblen=${#bb[@]}
[[ "$b" = "" ]] && b=("${bb[@]}")
blen=${#b[@]}
blast=$(($blen-1))

function get-next-prev {
    cur="$1"
    chg="$2"
    for i in "${!bb[@]}"; do
        if [[ "${bb[$i]}" = "$cur" ]]; then
            i=$(echo "($i+($chg))%$bblen" | bc)
            echo "${bb[$i]}";
            break
        fi
    done
}

[[ "$a" = "-a" ]] && s=''

if [[ "$s" != "" ]]; then
    old=$selected
    if [[ "$s" = "next" ]]; then
        [[ "$old" = "" ]] && old=${bb[0]}
        s=$(get-next-prev $old 1)
        echo $s
    elif [[ "$s" = "prev" ]]; then
        [[ "$old" = "" ]] && old=${bb[0]}
        s=$(get-next-prev $old -1)
        echo $s
    elif [[ "$s" = "none" ]]; then
        s=''
    fi
    echo $s > /tmp/bar-selected
    update-all
    exit
fi

function get {
    F=$1
    A=$2
    DV=${F}_dura; D=${!DV}; DB=$D
    LV=${F}_last; L=${!LV}
    VV=${F}_prev; V=${!VV}
    SV=${F}_sig;  S=${!SV}
    now=$(date '+%s')
    [[ "$L" = "" ]] && L=$now
    diff=$(($now - $L))
    if [[ "$D" = "once" || "$D" = "" ]]; then diff=0 && D=1; fi
    if [[ "$V" = "" || "$L" = "" || "$diff" -ge "$D" ]]; then
        V=$($F $A)
        eval $VV=\'"$V"\'
        [[ "$DB" != "once" ]] && eval $LV=$now
    fi
    if [[ "$selected" = "$F" ]]; then echo -n '<span color="#285577">'; fi
    echo -n $V
    [[ "$V" != '' && $number == 1 ]] && echo -n " ($S)"
    if [[ "$selected" = "$F" ]]; then echo -n '</span>'; fi
}

function time {
    [[ $BLOCK_BUTTON = "1" ]] && $TERMINAL -e x --eval '(cfw:open-org-calendar)'
    echo -n $(date '+%a %Y-%m-%d %I:%M:%S %p')
}

function batt {
    V=$(cat /sys/class/power_supply/BAT1/capacity 2>/dev/null)
    C=$(cat /sys/class/power_supply/BAT1/status 2>/dev/null)

    if [[ "$V" = "" || "$C" = "" ]]; then
        B=$(acpi -b)
        V=$(echo $B | awk -F'[,:%]' '{print $3}')
        C=$(echo $B | awk -F'[, ]' '{print $3}')
    fi

    R=''

    if [[ "$1" = "-a" ]]; then
        if [[ "$C" != 'Discharging' ]]; then
            echo -n "~"
        fi
        printf "%d%%" $V
        exit
    fi

    if [[ "$C" != 'Discharging' ]]; then
        R='gold'
        awesome-font-echo '\uf1e6' $R
        echo -n ' '
    elif [[ "$V" -le "5" ]]; then
        R='red'
        awesome-font-echo '\uf12a' $R
        echo -n ' '
    elif [[ "$V" -le "20" ]]; then
        R='red'
    fi

    if [[ "$V" -lt "50" ]]; then
        awesome-font-echo '\uf243' $R
    elif [[ "$V" -lt "60" ]]; then
        awesome-font-echo '\uf242' $R
    elif [[ "$V" -lt "90" ]]; then
        awesome-font-echo '\uf241' $R
    else
        awesome-font-echo '\uf240' $R
    fi

    printf " %d%%" $V

    battery-check "$V" "$C"
}

function wifi {
    [[ $BLOCK_BUTTON = "1" ]] && networkmanager_dmenu
    V=$(awk 'NR==3 {print $3}' /proc/net/wireless)
    [[ "$V" != '' ]] && {
        [[ "$1" != "-a" ]] && \
            awesome-font-echo '\uf1eb' && echo -n ' '
        printf '%.0f%%' $V
    }
}

function brig {
    [[ $BLOCK_BUTTON = "1" ]] && dmenudisplay
    [[ "$1" != "-a" ]] && awesome-font-echo '\uf108' && echo -n ' '
    echo -n "$(brightness -print)%"
}

function volu {
    case $BLOCK_BUTTON in
	      1) $TERMINAL -e pulsemixer & disown ;;
	      3) pamixer -t ;;
	      4) pamixer -i 5 ;;
	      5) pamixer -d 5 ;;
    esac
    V=$(pamixer --get-volume)
    if [[ "$1" != "-a" ]]; then
        if [[ $(pamixer --get-mute) = "true" || $V = 0 ]]; then
            awesome-font-echo '\uf026'
            echo -n '<span font="3"> </span>'
            awesome-font-echo '\uf00d'
        #elif [[ "$V" -lt "50" ]]; then
        #    awesome-font-echo '\uf027'
        else
            awesome-font-echo '\uf028'
        fi
        echo -n ' '
    fi
    printf "%d%%" $V
}

function sens {
    [[ $BLOCK_BUTTON = "1" ]] && $TERMINAL -e popsensors
    O=$(sensors coretemp-isa-0000 -j | jq '.["coretemp-isa-0000"]["Package id 0"]')
    T=$(echo "$O" | jq '.["temp1_input"]')
    M=$(echo "$O" | jq '.["temp1_max"]')
    if [[ "$1" != "-a" ]]; then
        P=$(printf '%.0f' $(echo "$T/$M*100" | bc -l))
        if [[ "$P" -ge "90" ]]; then
            awesome-font-echo '\uf12a' red
            echo -n ' '
            awesome-font-echo '\uf2c7' red
        elif [[ "$P" -gt "50" ]]; then
            awesome-font-echo '\uf2c8'
        elif [[ "$P" -gt "40" ]]; then
            awesome-font-echo '\uf2c9'
        else
            awesome-font-echo '\uf2ca'
        fi
        echo -n ' '
    fi
    echo -n "${T}°C"
}

function weat {
    [[ $BLOCK_BUTTON = "1" ]] && $TERMINAL -e popweather
    #                          Lines from 3rd to 4th        Remove color codes                Cut
    V=$(cat ~/.weatherreport | sed -n -e "3,4 p" -e "4 q" | sed "s/\x1B\[[0-9;]*[JKmsu]//g" | cut -c 16-)
    #S=$(echo "$V" | head -1 | awk '{print tolower($0)}')
    W=$(echo "$V" | tail -1 | awk -F'[- ]' '{print $1}')
    [[ "$1" != "-a" ]] && awesome-font-echo '\uf0c2' && echo -n ' '
    echo -n "${W}°C"
}

function pray {
    [[ $BLOCK_BUTTON = "1" ]] && $TERMINAL -e popprayer
    [[ "$1" != "-a" ]] && awesome-font-echo '\uf186' && echo -n ' '
    p n
}

function lang {
    arg='-v'
    [[ $BLOCK_BUTTON = "1" ]] && arg=''
    echo -n $(lang-toggle $arg)
}

function host {
    echo -n $(hostname)
}

if [[ $justaclick != 0 ]]; then
    if [[ $justaclick != '' ]]; then
        BLOCK_BUTTON=1 get $justaclick -a 1>/dev/null
        exit 0
    else
        echo "Unknown signal ($justaclick)"
        exit 1
    fi
fi

sep="  "
[[ "$a" = "-a" ]] && sep=" | "

if [[ "$blast" = "0" ]]; then
    get ${b[0]} $a
    exit
fi

loop=1
while [[ "$loop" = 1 ]]; do
    line=''
    for i in ${!b[@]}; do
        item=${b[$i]}
        out="$(get $item $a)"
        line="$line$out"
        [[ "$i" != "$blast" && "$out" != '' ]] && \
            line="$line$sep"
    done
    echo "$line"
    loop=$l
    [[ "$loop" = "1" ]] && sleep 1
done

exit 0

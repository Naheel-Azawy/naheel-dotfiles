#!/bin/bash

time_dura='1'
batt_dura='1'
bgig_dura='once'
volu_dura='once'
sens_dura='3'
weat_dura='1800'
pray_dura='10'
lang_dura='once'

time_sig='1'
batt_sig='2'
bgig_sig='3'
volu_sig='4'
sens_sig='5'
weat_sig='6'
pray_sig='7'
lang_sig='8'
first_sig=$time_sig
last_sig=$lang_sig

selected=$(cat /tmp/bar-selected 2> /dev/null)

function update-all {
    for sig in $(seq $first_sig $last_sig); do
        pkill -RTMIN+$sig i3blocks
    done
}

args=($@)
for i in ${!args[@]}; do
    arg=${args[$i]}
    case $arg in
        -a|--ascii)  a='-a'; args[$i]='';;
        -l|--loop)   l=1; args[$i]='';;
        -s|--select) s=${args[$i+1]}; args[$i]=''; args[$((i + 1))]='';;
        -r|--run)
            [[ "$selected" = "" ]] && exit
            rm -f /tmp/bar-selected
            update-all
            env BLOCK_BUTTON=1 bar $selected
            exit;;
    esac
done
b=${args[@]}
b=($b)
bb=(lang pray weat sens volu brig batt time)
bblen=${#bb[@]}
[[ "$b" = "" ]] && b=("${bb[@]}")
blen=${#b[@]}
blast=$(($blen-1))

function get-next-prev {
    cur="$1"
    chg="$2"
    for i in "${!bb[@]}"; do
        if [[ "${bb[$i]}" = "$cur" ]]; then
            i=$(echo "($i+($chg))%$bblen" | bc)
            echo "${bb[$i]}";
            break
        fi
    done
}

[[ "$a" = "-a" ]] && s=''

if [[ "$s" != "" ]]; then
    old=$selected
    if [[ "$s" = "next" ]]; then
        [[ "$old" = "" ]] && old=${bb[0]}
        s=$(get-next-prev $old 1)
        echo $s
    elif [[ "$s" = "prev" ]]; then
        [[ "$old" = "" ]] && old=${bb[0]}
        s=$(get-next-prev $old -1)
        echo $s
    elif [[ "$s" = "none" ]]; then
        s=''
    fi
    echo $s > /tmp/bar-selected
    update-all
    exit
fi

time_last=''
batt_last=''
bgig_last=''
volu_last=''
sens_last=''
weat_last=''
pray_last=''
lang_last=''

time_prev=''
batt_prev=''
bgig_prev=''
volu_prev=''
sens_prev=''
weat_prev=''
pray_prev=''
lang_prev=''

function get {
    F=$1
    A=$2
    DV=${F}_dura; D=${!DV}; DB=$D
    LV=${F}_last; L=${!LV}
    VV=${F}_prev; V=${!VV}
    now=$(date '+%s')
    [ "$L" = "" ] && L=$now
    diff=$(($now - $L))
    if [ "$D" = "once" ] || [ "$D" = "" ]; then diff=0 && D=1; fi
    if [ "$V" = "" ] || [ "$L" = "" ] || [ "$diff" -ge "$D" ]; then
        V=$($F $A)
        eval $VV=\'"$V"\'
        [ "$DB" != "once" ] && eval $LV=$now
    fi
    if [[ "$selected" = "$F" ]]; then echo -n '<span color="#285577">'; fi
    echo -n $V
    if [[ "$selected" = "$F" ]]; then echo -n '</span>'; fi
}

function time {
    [[ $BLOCK_BUTTON = "1" ]] && gnome-calendar
    echo -n $(date '+%a %Y-%m-%d %I:%M:%S %p')
}

function batt {
    V=$(cat /sys/class/power_supply/BAT1/capacity 2>/dev/null)
    C=$(cat /sys/class/power_supply/BAT1/status 2>/dev/null)

    if [ "$V" = "" ] || [ "$C" = "" ]; then
        B=$(acpi -b)
        V=$(echo $B | awk -F'[,:%]' '{print $3}')
        C=$(echo $B | awk -F'[, ]' '{print $3}')
    fi

    R=''

    if [ "$1" = "-a" ]; then
        if [ "$C" != 'Discharging' ]; then
            echo -n "~"
        fi
        printf "%d%%" $V
        exit
    fi

    if [ "$C" != 'Discharging' ]; then
        R='gold'
        awesome-font-echo '\uf1e6' $R
        echo -n ' '
    elif [ "$V" -le "5" ]; then
        R='red'
        awesome-font-echo '\uf12a' $R
        echo -n ' '
    elif [ "$V" -le "20" ]; then
        R='red'
    fi

    if [ "$V" -lt "50" ]; then
        awesome-font-echo '\uf243' $R
    elif [ "$V" -lt "60" ]; then
        awesome-font-echo '\uf242' $R
    elif [ "$V" -lt "90" ]; then
        awesome-font-echo '\uf241' $R
    else
        awesome-font-echo '\uf240' $R
    fi

    printf " %d%%" $V
}

function brig {
    [[ $BLOCK_BUTTON = "1" ]] && arandr
    [ "$1" != "-a" ] && awesome-font-echo '\uf108' && echo -n ' '
    echo -n "$(brightness -print)%"
}

function volu {
    case $BLOCK_BUTTON in
	      1) $TERMINAL -e pulsemixer & disown ;;
	      3) pamixer -t ;;
	      4) pamixer -i 5 ;;
	      5) pamixer -d 5 ;;
    esac
    V=$(pamixer --get-volume)
    if [ "$1" != "-a" ]; then
        if [ $(pamixer --get-mute) = "true" ] || [ $V = 0 ]; then
            awesome-font-echo '\uf026\uf00d'
        elif [ "$V" -le "20" ]; then
            awesome-font-echo '\uf027'
        else
            awesome-font-echo '\uf028'
        fi
        echo -n ' '
    fi
    printf "%d%%" $V
}

function sens {
    O=$(sensors coretemp-isa-0000 -j | jq '.["coretemp-isa-0000"]["Package id 0"]')
    T=$(echo "$O" | jq '.["temp1_input"]')
    M=$(echo "$O" | jq '.["temp1_max"]')
    if [ "$1" != "-a" ]; then
        P=$(printf '%.0f' $(echo "$T/$M*100" | bc -l))
        if [ "$P" -ge "90" ]; then
            awesome-font-echo '\uf12a' red
            echo -n ' '
            awesome-font-echo '\uf2c7' red
        elif [ "$P" -gt "50" ]; then
            awesome-font-echo '\uf2c8'
        elif [ "$P" -gt "40" ]; then
            awesome-font-echo '\uf2c9'
        else
            awesome-font-echo '\uf2ca'
        fi
        echo -n ' '
    fi
    echo -n "${T}Â°C"
}

function weat {
    [[ $BLOCK_BUTTON = "1" ]] && st -e popweather
    #                          Lines from 3rd to 4th        Remove color codes                Cut
    V=$(cat ~/.weatherreport | sed -n -e "3,4 p" -e "4 q" | sed "s/\x1B\[[0-9;]*[JKmsu]//g" | cut -c 16-)
    S=$(echo "$V" | head -1 | awk '{print tolower($0)}')
    W=$(echo "$V" | tail -1 | awk -F'[- ]' '{print $1 $3}')
    [ "$1" != "-a" ] && awesome-font-echo '\uf0c2' && echo -n ' '
    echo -n "$W"
}

function pray {
    [[ $BLOCK_BUTTON = "1" ]] && st -e popprayer
    [ "$1" != "-a" ] && awesome-font-echo '\uf186' && echo -n ' '
    p n
}

function lang {
    arg='-v'
    [[ $BLOCK_BUTTON = "1" ]] && arg=''
    echo -n $(lang-toggle $arg)
}

function host {
    echo -n $(hostname)
}

sep=" "
[ "$a" = "-a" ] && sep=" | "

if [ "$blast" = "0" ]; then
    get ${b[0]} $a
    exit
fi

loop=1
while [ "$loop" = 1 ]; do
    for i in ${!b[@]}; do
        item=${b[$i]}
        get $item $a
        [ "$i" != "$blast" ] && echo -n "$sep"
    done
    echo
    loop=$l
    [ "$loop" = "1" ] && sleep 1
done

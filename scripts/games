#!/usr/bin/env python3

import sh
from sys import argv

# TODO: move to personal

dir     = "/mnt/hdd1/Public/Games"
dir_gb  = f"{dir}/gameboy"
dir_n64 = f"{dir}/n64"
dir_psx = f"{dir}/psx"
dir_ps2 = f"{dir}/ps2"
dir_psp = f"{dir}/psp"
dir_win = f"{dir}/windows"

gbc = lambda name:    sh.mgba_qt.bake(f"{dir_gb}/{name}")
n64 = lambda name:    sh.mupen64plus.bake(f"{dir_n64}/{name}")
psx = lambda name:    sh.mednafen.bake(f"{dir_psx}/{name}")
ps2 = lambda name:    sh.pcsx2.bake(f"{dir_ps2}/{name}", fullscreen=True, nogui=True)
psp = lambda name:    sh.PPSSPPSDL.bake(f"{dir_psp}/{name}")
pol = lambda name:    sh.jailfence.bake(name)
tui = lambda name:    sh.theterm.bake(name + "; read")

games = {
    "supermario":      gbc("Super Mario Bros. Deluxe (USA, Europe).gbc"),
    "mariokart":       gbc("Mario Kart Super Circuit (U) [!].gba"),
    "donkykong":       gbc("1521 - Classic Nes - Donkey Kong (U)(Hyperion).gba"),
    "megaman-x8":      ps2("Mega Man X8 (1).7z-extracted/Mega Man X8.iso"),
    "megaman-x5":      psx("megaman_x5/Megaman X5.cue"),
    "pacman":          gbc("Ms. Pac-Man - Special Color Edition (USA).gbc"),
    "pokemon-crystal": gbc("Pokemon - Crystal Version (USA, Europe).gbc"),
    "spider":          pol("spider"),
    "pinball":         pol("PINBALL"),
    "tekken3":         psx("Tekken 3/Tekken 3.cue"),
    "pepsiman":        psx("pepsiman/Pepsiman (Japan).cue"),
    "gnome-mines":     sh.gnome_mines.bake(),
    "gnome-chess":     sh.gnome_chess.bake(),
    "invaders":        tui("invaders"),
    "nudoku":          tui("nudoku"),
    "tetris":          tui("tetris"),
    "snake":           tui("snake"),
    "nfs-most-wanted": pol("most wanted"),
    "gta-vice-city":   pol("vice city"),
    "2048":            tui("2048"),
    "ghost-rider":     psp("Ghost Rider.7z-extracted/Ghost Rider.iso"),
    "ac-bloodlines":   psp("Assassin's Creed - Bloodlines.7z-extracted/Assassin's Creed - Bloodlines.iso"),
    "steam":           sh.jailfence.steam.bake(),
    "playonlinux":     pol("pol")
}

if len(argv) < 2:
    games_str = '\n'.join(games.keys())
    game = sh.menus_face(sh.echo(games_str), "-l", 20).strip()
    if game in games:
        games[game]()
    else:
        exit(1)
else:
    arg = argv[1]
    if arg == "list":
        for g in games: print(g)
    else:
        if arg in games:
            games[arg]()
        else:
            print(f"Unknown game {arg}")
            exit(1)

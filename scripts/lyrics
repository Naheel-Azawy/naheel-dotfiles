#!/bin/sh

LYRICS_DIR="$HOME/.lyrics"
[ ! -d "$LYRICS_DIR" ] && mkdir -p "$LYRICS_DIR"

PAGER='less -R'

printout() {
    fribidi --nopad | $PAGER
}

exist() {
    command -v "$1" >/dev/null || {
        echo "$1 is not installed" >&2
        return 1
    }
}

help() {
    echo 'Usage: lyrics [OPTION] [QUERY]'
    echo
    echo '  -s, --save-clipboard save the clipboard content as the lyrics'
    echo '  -t, --trans LANG     show the translation'
    echo '  -h, --help           display this help and exit'
}

getmpd() {
    M=$(mpc -f '%title% - %artist%' | head -n -1) && {
        S=$(echo "$M" | tail -n 1 | sed -En 's/\[(.+)\].+/\1/p')
        [ "$S" = playing ] && {
            M=$(echo "$M" | head -n -1)
            echo "$M"
        }
    }
}

getcmus() {
    C=$(cmus-remote -Q) && {
        S=$(echo "$C" | sed -En 's/status (.+)/\1/p')
        [ "$S" = playing ] && {
            T=$(echo "$C" | sed -rn 's/tag title (.+)/\1/p')
            A=$(echo "$C" | sed -rn 's/tag artist (.+)/\1/p')
            [ "$T" ] && [ "$A" ] && {
                echo "$T - $A"
            }
        }
    }
}

getbrowser() {
    WIN=$(xdotool search --onlyvisible --class "chromium")
    # sorry :)
    [ "$WIN" ] || xprop -id "$WIN" | sed -En 's/_NET_WM_NAME\(UTF8_STRING\) = "(.*)"/\1/p' | sed -En 's/^\([0-9]+\)\s+(.+).*/\1/; s/\s*\(.+\)//; s/\s*\[.+\]//; s/[lL]yrics//; s/ - YouTube - Chromium//; s/\-//gp'
}

justdoit() {
    Q=$(echo "$1" | sed 's/ /+/g')
    URL="https://lyric-a.herokuapp.com/?action=search&name=$Q"
    RES=$(curl "$URL")
    RES=$(echo "$RES" | awk '
    {
        split($0, arr, "<hr>")
        str = arr[2]
        gsub("<br>", "\n", str)
        gsub("<[^>]+>", "", str)
        print str
    }')
    # https://stackoverflow.com/a/7363393/3825872
    echo "$RES" | awk '
    /[[:graph:]]/ {
        # a non-empty line
        # set the flag to begin printing lines
        p=1      
        # print the accumulated "interior" empty lines 
        for (i=1; i<=n; i++) print ""
        n=0
        # then print this line
        print
    }
    p && /^[[:space:]]*$/ {
        # a potentially "interior" empty line. remember it.
        n++
    }'
}

main() {
    SET=
    TRANS=
    case "$1" in
        -s|--save-clipboard) SET=1      && shift    ;;
        -t|--trans)          TRANS="$2" && shift 2  ;;
        -*)                  help       && return 1 ;;
    esac

    Q=$(echo "$*" | tr -s ' ') # query; remove extra spaces

    # try finding a query
    [ "$Q" ] || Q=$(getmpd)
    [ "$Q" ] || Q=$(getcmus)
    [ "$Q" ] || Q=$(getbrowser)
    [ "$Q" ] || {
        echo 'No query found' >&2
        return 1
    }
    
    F="$LYRICS_DIR/$Q"     # cache file
    TF="$F - trans $TRANS" # translation cache file

    # save the clipboard text
    [ "$SET" ] && {
        exist xclip || return 1
        xclip -o -selection clipboard > "$F"
        return
    }

    # if the translation is cached
    if [ "$TRANS" ]; then
        exist trans || return 1
        [ -f "$TF" ] && {
            printout < "$TF"
            exit 0
        }
    fi

    # get the lyrics
    if [ -f "$F" ]; then
        S=$(cat "$F")
    else
        S=$(justdoit "$Q")
        echo "$S" > "$F"
    fi

    # translate if needed
    if [ "$TRANS" ]; then
        echo "$S" | trans -no-bidi -b :"$TRANS" 2>/dev/null | tee "$TF" | \
            while read -r line; do
                echo "$line" | fribidi --nopad
            done | $PAGER
    else
        echo "$S" | printout
    fi
}

main "$@"

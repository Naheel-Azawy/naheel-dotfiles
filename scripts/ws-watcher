#!/bin/python3

import sh
import os
import subprocess
import json

class WMImpl:
    def __init__(self):
        raise Exception("Unimplemented")

    def run(self):
        raise Exception("Unimplemented")

class Workspace:
    def __init__(self):
        self.name    = ""
        self.visible = False
        self.focused = False
        self.urgent  = False

    def __str__(self):
        return json.dumps({
            "name": self.name,
            "visible": self.visible,
            "focused": self.focused,
            "urgent": self.urgent
        })

class I3WM(WMImpl):
    def __init__(self, callback):
        self.callback = callback
        self.workspaces = []
        self.workspace_cmd = "i3-msg workspace"

    def update(self):
        j = json.loads(os.popen(
            "i3-msg -t get_workspaces").read())
        workspaces = []
        for item in j:
            w = Workspace()
            w.name    = item["name"]
            w.visible = item["visible"]
            w.focused = item["focused"]
            w.urgent  = item["urgent"]
            workspaces.append(w)
        self.workspaces = workspaces

    def run(self):
        self.update()
        self.callback(self)
        popen = subprocess.Popen(["i3-msg", "-t", "subscribe", "-m",
                                  '[ "workspace", "window" ]'],
                                 stdout=subprocess.PIPE,
                                 universal_newlines=True)
        for line in iter(popen.stdout.readline, ""):
            msg = json.loads(line)
            # workspace events
            try:
                workspace_event = msg["current"]["type"] == "workspace"
                if workspace_event:
                    self.update()
            except KeyError:
                workspace_event = False
            self.callback(self)
        popen.stdout.close()
        code = popen.wait()
        if code != 0:
            raise Exception(f"i3-msg exited with code {code}")

class BSPWM(WMImpl):
    def __init__(self, callback):
        self.callback = callback
        self.workspaces = []
        self.workspace_cmd = "bspc desktop -f"

    def run(self):
        popen = subprocess.Popen(["bspc", "subscribe", "report"],
                                 stdout=subprocess.PIPE,
                                 universal_newlines=True)
        for line in iter(popen.stdout.readline, ""):
            # check man bspc, REPORT FORMAT
            workspaces = []
            focused_monitor = False
            for item in line.split(":"):
                if item[0] == "W":
                    item = item[1:]
                if item[0] in ["M", "m"]:
                    focused_monitor = item[0] == "M"
                elif item[0] in ["O","o","F","U","u"]:
                    w = Workspace()
                    w.name    = item[1:]
                    w.visible = item[0] in ["O", "F"]
                    w.focused = w.visible and focused_monitor
                    w.urgent  = item[0] in ["U", "u"]
                    workspaces.append(w)
            self.workspaces = workspaces
            self.callback(self)
        popen.stdout.close()
        code = popen.wait()
        if code != 0:
            raise Exception(f"bspc exited with code {code}")

# https://github.com/phillbush/lsd
class LSD(WMImpl):
    def __init__(self, callback):
        self.callback = callback
        self.workspaces = []
        self.workspace_cmd = "bspc desktop -f" # TODO: use focus?

    def run(self):
        popen = subprocess.Popen(["lsd", "-w"],
                                 stdout=subprocess.PIPE,
                                 universal_newlines=True)
        for line in iter(popen.stdout.readline, ""):
            ws = []
            items = line.rstrip().split("\t")
            for item in items:
                item = item.split(":")
                state = item[0][0]
                nodes = int(item[0][1:])
                if nodes > 0 or state == "*":
                    w = Workspace()
                    w.name    = item[1]
                    w.visible = False # TODO: handle with lsd?
                    w.focused = state == "*"
                    w.urgent  = state == "-"
                    ws.append(w)
            self.workspaces = ws
            self.callback(self)
        popen.stdout.close()
        code = popen.wait()
        if code != 0:
            raise Exception(f"lsd exited with code {code}")

def main():
    def callback(wm):
        s = ""
        for ws in wm.workspaces:
            if ws.focused:
                s += f'<span background="white" foreground="black"><b> {ws.name} </b></span>'
            elif ws.urgent:
                s += f'<span background="red" foreground="white"> {ws.name} </span>'
            elif ws.visible:
                s += f'<span background="gray" foreground="black"> {ws.name} </span>'
            else:
                s += f' {ws.name} '
        if s != wm.prev_s:
            # print(s)
            sh.dunstify("Workspaces:", s, r=123,
                        urgency="critical" if "red" in s else "normal")
            wm.prev_s = s

    wm = os.getenv("WINDOW_MANAGER")
    if False:
        w = LSD(callback)
    elif wm == "i3":
        w = I3WM(callback)
    elif wm == "bspwm":
        w = BSPWM(callback)
    else:
        raise Exception(f"Unknown window manager {wm}")
    w.prev_s = None
    w.run()

if __name__ == "__main__":
    main()

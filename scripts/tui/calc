#!/bin/sh

from_stdin() {
    case $# in
        1) case "$1" in
               add) awk 'BEGIN {ans=0} {ans+=$1} END {print ans}';;
               xor) awk 'BEGIN {ans=0} {ans=xor(ans, $1)} END {print ans}';;
               avg) awk 'BEGIN {s=0;c=0} {s+=$1;c++} END {print s/c}';;
               *) return 1;
           esac;;
        2) case "$1" in
               add) awk '{print $1+arg}' arg="$2";;
               sub) awk '{print $1-arg}' arg="$2";;
               mul) awk '{print $1*arg}' arg="$2";;
               div) awk '{print $1/arg}' arg="$2";;
               pow) awk '{print $1^arg}' arg="$2";;
               and) awk '{print and($1, arg)}' arg="$2";;
               or)  awk '{print  or($1, arg)}' arg="$2";;
               xor) awk '{print xor($1, arg)}' arg="$2";;
               *) return 1;
           esac;;
        *) return 1;;
    esac
}

rn_c() {
    command -v gcc >/dev/null || {
        echo 'GCC is not installed!' >&2
        return 1
    }
    F=$(mktemp /tmp/XXXXX.c) &&
        echo "
#include <stdio.h>
#include<math.h>
int main(int argc, char** argv) {
  $*;
  return 0;
}" > "$F" &&
        gcc -lm -o "$F.bin" "$F" &&
        "$F.bin" &&
        rm -f "$F" "$F.bin"
}

run_c() {
    rn_c "
double ans = (double) (($*) + 0.0);
if (((int) ans) == ans)
    printf(\"%d\\n\", (int) ans);
else
    printf(\"%f\\n\", ans);"
}

run_cx() {
    rn_c "
printf(\"0x%x\\n\", (int) $*)"
}

run_cb() {
    # https://stackoverflow.com/a/27627015/3825872
    rn_c "
void printbin(int number) {
    if (number) {
        printbin(number >> 1);
        putc((number & 1) ? '1' : '0', stdout);
    }
}
printf(\"0b\");
printbin((int) $*);
putc('\\n', stdout);"
}

run_bc() {
    [ $# = 0 ] && (bc -q; exit)
    echo "$@" | bc -l
}

run_py() {
    command -v ipython >/dev/null || {
        echo 'IPython is not installed!' >&2
        return 1
    }
    PYH='
from math import *
import numpy as np
import matplotlib.pyplot as plt
plt.style.use("dark_background")
def frange(x, y, jump):
    res = []
    while x < y:
        res.append(x)
        x += jump
    return res
def plot(*args, **kwargs):
    plt.plot(*args, **kwargs)
    plt.show()
'
    [ $# = 0 ] && (ipython --no-banner -i -c "$PYH"; exit)
    F=$(mktemp)
    echo "$PYH
print($*)" > "$F"
    python "$F"
    rm -f "$F"
}

run_js() {
    command -v node >/dev/null || {
        echo 'Node.js is not installed!' >&2
        return 1
    }
    JSH='
print=s=>console.log(s)
e=E=Math.E
LN2=Math.LN2
LOG2E=Math.LOG2E
SQRT1_2=Math.SQRT1_2
LN10=Math.LN10
LOG10E=Math.LOG10E
pi=PI=Math.PI
SQRT2=Math.SQRT2
abs=Math.abs
acosh=Math.acosh
asinh=Math.asinh
atan2=Math.atan2
cbrt=Math.cbrt
clz32=Math.clz32
cosh=Math.cosh
expm1=Math.expm1
fround=Math.fround
imul=Math.imul
log10=Math.log10
log2=Math.log2
min=Math.min
random=Math.random
sign=Math.sign
sinh=Math.sinh
tan=Math.tan
trunc=Math.trunc
acos=Math.acos
asin=Math.asin
atan=Math.atan
atanh=Math.atanh
ceil=Math.ceil
cos=Math.cos
exp=Math.exp
floor=Math.floor
hypot=Math.hypot
log=Math.log
log1p=Math.log1p
max=Math.max
pow=Math.pow
round=Math.round
sin=Math.sin
sqrt=Math.sqrt
tanh=Math.tanh'
    [ $# = 0 ] && (node -i -e "$JSH"; exit)
    NODE_DISABLE_COLORS=1 node -e "$JSH;console.log($*)"
}

run_oct() {
    command -v octave-cli >/dev/null || {
        echo 'Octave is not installed!' >&2
        return 1
    }
    OH="
packages = {'communications', 'signal', 'control', 'symbolic'};
for i = 1:size(packages, 2)
    p = packages{i};
    try
        pkg('load', p);
    catch e
    end
end
format long;
PS1('>> ');
function units
    system('units');
end
"
    octnow() { octave-cli -q --persist --eval "$OH"; }
    [ $# = 0 ] && (octnow; exit)
    echo "$@" | octnow | sed 's/ans =\s*//g'
}

run_test() {
    tst() {
        echo ==================
        echo "> calc $*"
        time -p "$0" "$@"
    }
    echo "RUNNING CALC TESTS"
    tst -c   1+1
    tst -cx  1+1
    tst -cb  1+1
    tst -bc  1+1
    tst -py  1+1
    tst -js  1+1
    tst -oct 1+1

    tst -c   "sin(M_PI)"
    tst -bc  "s(3.1415)"
    tst -py  "sin(pi)"
    tst -js  "sin(pi)"
    tst -oct "sin(pi)"
}

main() {
    case "$1" in
        max) cut -f1 -d',' "$@" | sort -n | tail -1 ;;
        min) cut -f1 -d',' "$@" | sort -n | head -1 ;;
        -c)     shift; run_c   "$@";;
        -cx|-x) shift; run_cx  "$@";;
        -cb|-b) shift; run_cb  "$@";;
        -bc|-q) shift; run_bc  "$@";;
        -py)    shift; run_py  "$@";;
        -js)    shift; run_js  "$@";;
        -oct)   shift; run_oct "$@";;
        --test) shift; run_test    ;;
        *)
            if [ -p /dev/stdin ] && [ $# -ge 1 ]; then
                from_stdin "$@"
            elif [ $# = 0 ]; then
                run_oct ||
                    run_py ||
                    run_js ||
                    run_bc
            else
                case "$1" in
                    add|xor|avg)
                        CMD="$1" && shift
                        echo "$@" | tr ' ' '\n' |
                            from_stdin "$CMD";;
                    *)
                        run_bc "$@";;
                esac
            fi;;
    esac
}

main "$@"

#!/usr/bin/env jsh

function ls_parts() {
    let blocks = JSON.parse($`lsblk --json -po 'name,type,size,label,mountpoint'`).blockdevices;
    let parts = [];
    for (let block of blocks) {
        if (!block.children) continue;
        for (let part of block.children) {
            if (part.type == "part" || part.type == "lvm") {
                parts.push(part);
            }
        }
    }
    return parts;
}

const mtp_dir = `${HOME}/MTP Drives`;

// TODO: remove dirs if MTP mounting fails
// TODO: rewrite in py
// TODO: ifuse

function ls_mtp() {
    let res = $`simple-mtpfs -l`;
    if (res.code != 0) {
        return [];
    }
    res = res.trim().split("\n");
    let mp;
    for (let i in res) {
        mp = `${mtp_dir}/${res[i]}`;
        mp = test("-d", mp) ? mp : null;
        res[i] = {
            name: res[i],
            type: 'mtp',
            size: null,
            label: null,
            mountpoint: mp
        };
    }
    return res;
}

function mount_mtp(name) {
    let num = name.split(":")[0];
    mkdir("-p", `${mtp_dir}/${name}`);
    return $`simple-mtpfs --device ${num} '${mtp_dir}/${name}'`;
}

function unmount_mtp(name) {
    let ret = $`fusermount -u '${mtp_dir}/${name}'`;
    if (ret.code == 0) {
        rm("-r", `${mtp_dir}/${name}`);
        if (ls(mtp_dir).toString().trim().length == 0) {
            rm("-r", mtp_dir);
        }
    }
    return ret;
}

function ls_all() {
    return [...ls_mtp(), ...ls_parts()];
}

function stringify(drives) {
    let res = [];
    let line;
    for (let d of drives) {
        if (["/", "/boot", "/home", "[SWAP]"]
            .includes(d.mountpoint)) continue;
        line = d.mountpoint ? "Unmount " : "Mount ";
        line += d.name;
        if (d.label)
            line += ` ${d.label}`;
        if (d.type != "mtp" && d.mountpoint)
            line += ` from ${d.mountpoint}`;
        if (d.size)
            line += ` (${d.size})`;
        res.push(line);
    }
    res.sort();
    return str(res.join("\n"));
}

function main() {
    let drives = ls_all();
    let sel = stringify(drives).exec("menu-interface -l 20")
        .toString().trim();
    if (sel) {
        let mtp = sel.endsWith("(MTP)");
        sel = sel.split(" ");
        let command = sel[0].trim();
        notify(`${command}ing...`);
        command = command.toLowerCase();
        let ret, ret_msg, mp;
        if (mtp) {
            sel = sel.slice(1).join(" ");
            if (command == "mount") {
                ret = mount_mtp(sel);
                mp = `${mtp_dir}/${sel}`;
                if (ret.code == 0) {
                    ret_msg = `Mounted ${sel}`;
                } else {
                    ret_msg = `Failed mounting ${sel}`;
                }
            } else {
                ret = unmount_mtp(sel);
                if (ret.code == 0) {
                    ret_msg = `Unmounted ${sel}`;
                } else {
                    ret_msg = `Failed unmounting ${sel}`;
                }
            }
        } else {
            sel = sel[1].trim();
            ret = $`udisksctl ${command} -b ${sel}`;
            ret_msg = ret.stdout || ret.stderr;
            if (ret.stdout.includes(" at ")) { // mounted successfully
                mp = ret.split(" at ")[1].trim();
            }
        }
        echo(ret_msg);
        notify(ret_msg);
        if (mp) {
            $`dmenuopendir '${mp}'`; // open dir
        }
        exit(ret.code);
    } else {
        exit(0);
    }
}

main();

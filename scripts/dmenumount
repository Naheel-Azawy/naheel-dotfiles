#!/bin/node

const sh = require("/usr/lib/node_modules/shelljs/shell.js");
const argv = process.argv.slice(2);
const notify = msg => sh.exec(`notify-send '${msg}'`);

sh.config.silent = true;

function ls_parts() {
    let blocks = JSON.parse(sh.exec("lsblk --json -po 'name,type,size,label,mountpoint'").toString())
        .blockdevices;

    let parts = [];
    for (let block of blocks) {
        for (let part of block.children) {
            if (part.type == "part" || part.type == "lvm") {
                parts.push(part);
            }
        }
    }
    
    return parts;
}

function ls_mtp() {
    // TODO: implement MTP
    return [];
}

function ls_all() {
    return [...ls_mtp(), ...ls_parts()];
}

function stringify(drives) {
    let res = [];
    let line;
    for (let d of drives) {
        if (["/", "/boot", "/home", "[SWAP]"]
            .includes(d.mountpoint)) continue;
        line = d.mountpoint ? "Unmount " : "Mount ";
        line += d.name;
        if (d.label)      line += ` ${d.label}`;
        if (d.mountpoint) line += ` from ${d.mountpoint}`;
        if (d.size)       line += ` (${d.size})`;
        res.push(line);
    }
    res.sort();
    return new sh.ShellString(res.join("\n"));
}

function main() {
    let drives = ls_all();
    let sel = stringify(drives).exec("menu-interface -l 20").trim();
    if (sel) {
        sel = sel.split(" ");
        let command = sel[0].trim().toLowerCase();
        sel = sel[1].trim();
        let ret = sh.exec(`udisksctl ${command} -b ${sel}`);
        sh.echo(ret);
        notify(ret);
        if (ret.stdout.includes(" at ")) { // mounted successfully
            let mp = ret.split(" at ")[1].trim();
            sh.exec(`dmenuopendir '${mp}'`); // open dir
        }
        sh.exit(ret.code);
    } else {
        sh.exit(0);
    }
}

main();
